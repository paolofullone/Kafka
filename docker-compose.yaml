services:
  oracle:
    cap_drop:
      - NET_RAW
    image: gvenzl/oracle-xe:21-slim-faststart
    container_name: oracle
    environment:
      - ORACLE_PASSWORD=password
    ports:
      - '1521:1521'
    volumes:
      - ./src/Data/Oracle/my-init.sql:/container-entrypoint-initdb.d/my-init.sql:ro
    restart: always

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      SA_PASSWORD: 'Password123!'
      ACCEPT_EULA: 'Y'
      MSSQL_PID: 'Developer'
    ports:
      - '1433:1433'
    cap_drop:
      - NET_RAW
    restart: always

  mssqltools:
    image: mcr.microsoft.com/mssql-tools
    container_name: 'mssqltools'
    depends_on:
      - sqlserver
    volumes:
      - ./src/Data/SqlServer/:/tmp/
    command: /bin/bash -c "ls /tmp/ && sleep 60 && chmod +x /tmp/database.sh && /tmp/database.sh"
    #restart: always # can be used here and reduce the sleep time above, in this case set the sql script to verifiy for existing resources before creating them

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka-confluent
    networks:
      - broker-kafka
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
      KAFKA_KRAFT_MODE: 'true'
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENERS: BROKER://kafka:9091,EXTERNAL://0.0.0.0:9092,CONTROLLER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: BROKER:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_ADVERTISED_LISTENERS: BROKER://kafka:9091,EXTERNAL://127.0.0.1:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_CLEANER_ENABLE: 'false'
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: -1
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    cap_drop:
      - NET_RAW

  init-kafka:
    image: confluentinc/cp-kafka:latest
    container_name: init-kafka
    networks:
      - broker-kafka
    depends_on:
      - kafka
    entrypoint: ['/bin/sh', '-c']
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --list --bootstrap-server kafka:9091

      echo -e 'Creating topic '

      kafka-topics --bootstrap-server kafka:9091 --create --if-not-exists --topic kafka-playground-topic --partitions 10 --replication-factor 1

      kafka-topics --bootstrap-server kafka:9091 --create --if-not-exists --topic kafka-healthcheck-topic --partitions 10 --replication-factor 1

      echo -e 'Sucessfully created topic'

      kafka-topics --list --bootstrap-server kafka:9091
      "

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop-local
    networks:
      - broker-kafka
    depends_on:
      - kafka
    ports:
      - '9001:9000'
    environment:
      KAFKA_BROKER_CONNECT: kafka:9091
networks:
  broker-kafka:
    driver: bridge
